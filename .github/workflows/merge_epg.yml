name: Run merge_epg.py

on:
  workflow_dispatch:  # Allow manual triggering
  schedule:
    - cron: '0 6 * * *'  # 1 AM ET every day UTC +5
    - cron: '0 18 * * *'  # 1 PM ET every day UTC +5

concurrency:
  group: "merge_epg"
  cancel-in-progress: true  # If another instance is running, cancel it

jobs:
  run_merge_epg_script:
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # Set up Python
    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    # Configure Git user
    - name: Configure Git user
      run: |
        git config --global user.email "you@example.com"
        git config --global user.name "Your Name"

    # Install dependencies from requirements.txt
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r scripts/requirements.txt
        npm install @freearhey/core

    # Delete old dummy EPG files before committing
    - name: Delete old dummy EPG files
      run: |
        current_time=$(date +%s)
        find ./scripts/_epg-end -type f -name "dummy--epg---*.xml" | while read file; do
          file_time=$(stat -c %Y "$file")
          time_diff=$((current_time - file_time))
          if [ $time_diff -gt 60 ]; then
            rm "$file"
          fi
        done



    # Ensure the directory exists
    - name: Create directory if it doesn't exist
      run: |
        mkdir -p ./scripts/_epg-end
    
    # List the contents before and after the process
    - name: List files before script
      run: ls -R ./scripts/_epg-end || echo "No files in _epg-end yet"
    
    # Run merge_epg.py script
    - name: Run merge_epg.py script
      run: |
        # python scripts/merge_epg.py --channels ./scripts/_epg-start/channels-custom-start.xml --output ./scripts/_epg-end/channels-custom-end.xml
        python scripts/merge_epg.py --channels ./scripts/_epg-start/channels-test-start.xml --output ./scripts/_epg-end/channels-test-end.xml
    
    # List files after running the script
    - name: List files after script
      run: ls -R ./scripts/_epg-end

    # Commit and push the changes to the repository
    - name: Commit and push generated files
      run: |
        if [ -f ./scripts/_epg-end/channels-test-end.xml ]; then
          git add ./scripts/_epg-end/*
          git add ./scripts/_epg-end/channels-test-end.xml
          git commit -m "Update generated EPG file"
          git push
        else
          echo "File not found: ./scripts/_epg-end/channels-test-end.xml"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

